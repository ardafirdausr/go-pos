// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/ardafirdausr/kaseer/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, param
func (_m *ProductUsecase) CreateProduct(ctx context.Context, param entity.CreateProductParam) (*entity.Product, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateProductParam) *entity.Product); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateProductParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, ID
func (_m *ProductUsecase) DeleteProduct(ctx context.Context, ID int64) (bool, error) {
	ret := _m.Called(ctx, ID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProducts provides a mock function with given fields: ctx
func (_m *ProductUsecase) GetAllProducts(ctx context.Context) ([]*entity.Product, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Product
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBestSellerProducts provides a mock function with given fields: ctx
func (_m *ProductUsecase) GetBestSellerProducts(ctx context.Context) ([]*entity.ProductSale, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.ProductSale
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.ProductSale); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ProductSale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByCode provides a mock function with given fields: ctx, code
func (_m *ProductUsecase) GetProductByCode(ctx context.Context, code string) (*entity.Product, error) {
	ret := _m.Called(ctx, code)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Product); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, ID
func (_m *ProductUsecase) GetProductByID(ctx context.Context, ID int64) (*entity.Product, error) {
	ret := _m.Called(ctx, ID)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Product); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, ID, param
func (_m *ProductUsecase) UpdateProduct(ctx context.Context, ID int64, param entity.UpdateProductParam) (bool, error) {
	ret := _m.Called(ctx, ID, param)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.UpdateProductParam) bool); ok {
		r0 = rf(ctx, ID, param)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.UpdateProductParam) error); ok {
		r1 = rf(ctx, ID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
